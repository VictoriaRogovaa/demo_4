document.addEventListener('DOMContentLoaded', function() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const config = {
        colors: ['#10367D', '#2D4D9E', '#4A64BF', '#677BDF', '#FF6B6B', '#FF8E8E', '#4ECDC4', '#7EDFD8', '#A05195', '#C27BB3', '#FDCB6E', '#FFEAA7'],
        maxInterests: 3,
        minAge: 18,
        maxAge: 100
    };

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = {
        currentStep: 1,
        totalSteps: 7,
        userData: {
            name: '',
            age: '',
            city: '',
            description: '',
            interests: [],
            moodColor: '#10367D',
            avatar: null,
            createdAt: new Date().toISOString()
        }
    };

    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const elements = {
        mainScreen: document.getElementById('mainScreen'),
        startBtn: document.getElementById('startBtn'),
        registrationForm: document.getElementById('registrationForm'),
        logo: document.querySelector('.logo-path')
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        initLogo();
        checkSavedProfile();
        bindEvents();
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
    function initLogo() {
        elements.logo.style.strokeDasharray = '150';
        elements.logo.style.strokeDashoffset = '150';
        setTimeout(() => {
            elements.logo.style.animation = 'drawLogo 2s ease-out forwards';
        }, 500);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    function checkSavedProfile() {
        const savedProfile = localStorage.getItem('datingProfile');
        if (savedProfile) {
            state.userData = JSON.parse(savedProfile);
            showProfile();
        }
    }

    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    function bindEvents() {
        elements.startBtn.addEventListener('click', startRegistration);
    }

    // –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    function startRegistration() {
        animateTransition(() => {
            elements.mainScreen.classList.add('hidden');
            elements.registrationForm.classList.remove('hidden');
            renderForm();
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    function animateTransition(callback) {
        elements.mainScreen.style.opacity = '0';
        setTimeout(() => {
            callback();
            setTimeout(() => {
                elements.registrationForm.style.opacity = '1';
                focusCurrentField();
            }, 50);
        }, 500);
    }

    // –†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã
    function renderForm() {
        elements.registrationForm.innerHTML = `
            ${generateSteps()}
        `;
        setupFormHandlers();
        focusCurrentField();
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤
    function generateSteps() {
        let html = '';
        for (let step = 1; step <= state.totalSteps; step++) {
            html += `
                <div class="form-step ${step === state.currentStep ? 'active' : ''}" data-step="${step}">
                    ${getStepContent(step)}
                    ${getStepButtons(step)}
                </div>
            `;
        }
        return html;
    }

    // –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–æ–≤
    function getStepContent(step) {
        const steps = {
            1: `<h2>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</h2>
                <input type="text" class="input-field" id="userName" placeholder="–í–∞—à–µ –∏–º—è" required>`,
            2: `<h2>–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</h2>
                <input type="number" class="input-field" id="userAge" min="${config.minAge}" max="${config.maxAge}" placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç" required>`,
            3: `<h2>–í–∞—à –≥–æ—Ä–æ–¥</h2>
                <input type="text" class="input-field" id="userCity" placeholder="–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?" required>`,
            4: `<h2>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ 1-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞</p>
                <div class="tags-container">
                    ${['music', 'sports', 'books', 'travel', 'art', 'games']
                        .map(interest => `
                            <div class="tag" data-interest="${interest}">
                                ${getInterestEmoji(interest)} ${getInterestName(interest)}
                            </div>`
                        ).join('')}
                </div>`,
            5: `<h2>–í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç</h2>
                <div class="colors-container">
                    ${config.colors.map(color => `
                        <div class="color-option" style="background: ${color}" data-color="${color}"></div>
                    `).join('')}
                </div>`,
            6: `<h2>–û —Å–µ–±–µ</h2>
                <p>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</p>
                <textarea class="input-field" id="userDescription" placeholder="–Ø –ª—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏ –∏..." rows="4"></textarea>`,
            7: `<h2>–í–∞—à–µ —Ñ–æ—Ç–æ</h2>
                <p>–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</p>
                <div class="avatar-upload">
                    <label class="btn">
                        üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                        <input type="file" id="avatarUpload" accept="image/*" hidden>
                    </label>
                    <div class="avatar-preview" id="avatarPreview"></div>
                </div>`
        };
        return steps[step] || '';
    }

    // –ö–Ω–æ–ø–∫–∏ —à–∞–≥–æ–≤
    function getStepButtons(step) {
        return `
            <div class="navigation">
                ${step > 1 ? '<button class="btn prev-step">–ù–∞–∑–∞–¥</button>' : ''}
                <button class="btn next-step">
                    ${step === state.totalSteps ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' : '–î–∞–ª–µ–µ'}
                </button>
            </div>
        `;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    function setupFormHandlers() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.next-step').forEach(btn => {
            btn.addEventListener('click', () => {
                if (state.currentStep === state.totalSteps) {
                    saveProfile();
                } else {
                    nextStep();
                }
            });
        });

        document.querySelectorAll('.prev-step').forEach(btn => {
            btn.addEventListener('click', prevStep);
        });

        // –ò–Ω—Ç–µ—Ä–µ—Å—ã
        document.querySelectorAll('.tag').forEach(tag => {
            tag.addEventListener('click', toggleInterest);
        });

        // –¶–≤–µ—Ç–∞
        document.querySelectorAll('.color-option').forEach(color => {
            color.addEventListener('click', selectColor);
        });

        // –ê–≤–∞—Ç–∞—Ä
        const upload = document.getElementById('avatarUpload');
        if (upload) {
            upload.addEventListener('change', handleAvatar);
        }

        // Enter –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
        document.querySelectorAll('.input-field').forEach(input => {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (state.currentStep === state.totalSteps) {
                        saveProfile();
                    } else {
                        nextStep();
                    }
                }
            });
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    function toggleInterest(e) {
        const interest = e.target.dataset.interest;
        
        if (e.target.classList.contains('selected')) {
            e.target.classList.remove('selected');
            state.userData.interests = state.userData.interests.filter(i => i !== interest);
        } else if (state.userData.interests.length < config.maxInterests) {
            e.target.classList.add('selected');
            state.userData.interests.push(interest);
        } else {
            alert(`–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${config.maxInterests} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤`);
        }
    }

    function selectColor(e) {
        document.querySelectorAll('.color-option').forEach(c => {
            c.style.transform = 'scale(1)';
            c.style.boxShadow = 'none';
        });
        
        e.target.style.transform = 'scale(1.1)';
        e.target.style.boxShadow = '0 0 15px rgba(0,0,0,0.2)';
        state.userData.moodColor = e.target.dataset.color;
    }

    function handleAvatar(e) {
        const file = e.target.files[0];
        if (file && file.type.match('image.*')) {
            const reader = new FileReader();
            reader.onload = (e) => {
                state.userData.avatar = e.target.result;
                const preview = document.getElementById('avatarPreview');
                preview.style.backgroundImage = `url(${e.target.result})`;
            };
            reader.readAsDataURL(file);
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    function nextStep() {
        if (!validateStep()) return;
        saveStepData();
        goToStep(state.currentStep + 1);
    }

    function prevStep() {
        goToStep(state.currentStep - 1);
    }

    function goToStep(step) {
        if (step < 1 || step > state.totalSteps) return;
        
        document.querySelector('.form-step.active').classList.remove('active');
        state.currentStep = step;
        const nextStepEl = document.querySelector(`[data-step="${step}"]`);
        
        if (nextStepEl) {
            nextStepEl.classList.add('active');
            nextStepEl.scrollIntoView({ behavior: 'smooth', block: 'start' });
            focusCurrentField();
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    function validateStep() {
        switch(state.currentStep) {
            case 1:
                if (!document.getElementById('userName').value.trim()) {
                    alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
                    return false;
                }
                return true;
            case 2:
                const age = parseInt(document.getElementById('userAge').value);
                if (isNaN(age)) {
                    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç');
                    return false;
                
                }   
                
                return true;
            case 3:
                if (!document.getElementById('userCity').value.trim()) {
                    alert('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥');
                    return false;
                }
                return true;
            case 4:
                if (state.userData.interests.length === 0) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å');
                    return false;
                }
                return true;
            default:
                return true;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    function saveStepData() {
        switch(state.currentStep) {
            case 1:
                state.userData.name = document.getElementById('userName').value.trim();
                break;
            case 2:
                state.userData.age = document.getElementById('userAge').value;
                break;
            case 3:
                state.userData.city = document.getElementById('userCity').value.trim();
                break;
            case 6:
                state.userData.description = document.getElementById('userDescription').value.trim();
                break;
        }
    }

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ
    function focusCurrentField() {
        const activeStep = document.querySelector('.form-step.active');
        const input = activeStep?.querySelector('input, textarea');
        input?.focus();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    function saveProfile() {
        if (!validateStep()) return;
        saveStepData();
        
        localStorage.setItem('datingProfile', JSON.stringify(state.userData));
        showProfile();
    }

    // –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
    function showProfile() {
        elements.registrationForm.classList.add('hidden');
        elements.mainScreen.innerHTML = `
        <div class="logo-container">
            <svg class="logo" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                <path class="logo-path" d="M20,50 Q35,20 50,50 T80,50" 
                      stroke="#10367D" 
                      stroke-width="8" 
                      fill="none" 
                      stroke-linecap="round"/>
            </svg>
        </div>
            <div class="profile-card">
                
                <div class="profile-avatar">
                    ${state.userData.avatar 
                        ? `<img src="${state.userData.avatar}" alt="–ê–≤–∞—Ç–∞—Ä">` 
                        : `<div class="avatar-placeholder">${getInitials(state.userData.name)}</div>`
                    }
                </div>
                
                <h2 class="profile-name">${state.userData.name}</h2>
                <div class="profile-age-city">
                    ${state.userData.age} –ª–µ—Ç, ${state.userData.city}
                </div>
                
                ${state.userData.description ? `
                    <div class="profile-description">
                        ${state.userData.description}
                    </div>
                ` : ''}
                
                <div class="profile-interests">
                    ${state.userData.interests.map(interest => `
                        <div class="interest-tag">
                            ${getInterestEmoji(interest)} ${getInterestName(interest)}
                        </div>
                    `).join('')}
                </div>
                
                <div class="profile-footer">
                    –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${new Date(state.userData.createdAt).toLocaleDateString()}
                </div>
                
                <div class="profile-actions">
                    <button class="btn" id="editProfileBtn">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="btn" id="newProfileBtn">–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</button>
                </div>
            </div>
        `;
        
        elements.mainScreen.classList.remove('hidden');
        elements.mainScreen.style.opacity = '1';
        
        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—Ñ–∏–ª—è
        document.getElementById('editProfileBtn').addEventListener('click', () => {
            startRegistration();
        });
        
        document.getElementById('newProfileBtn').addEventListener('click', () => {
            localStorage.removeItem('datingProfile');
            location.reload();
        });
        
        initLogo();
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getInitials(name) {
        return name.split(' ').map(n => n[0]).join('').toUpperCase();
    }

    function getInterestEmoji(interest) {
        const emojis = {
            music: 'üéµ', sports: '‚öΩ', books: 'üìö',
            travel: '‚úàÔ∏è', art: 'üé®', games: 'üéÆ'
        };
        return emojis[interest] || '‚ù§Ô∏è';
    }

    function getInterestName(interest) {
        const names = {
            music: '–ú—É–∑—ã–∫–∞', sports: '–°–ø–æ—Ä—Ç', books: '–ö–Ω–∏–≥–∏',
            travel: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', art: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', games: '–ò–≥—Ä—ã'
        };
        return names[interest] || interest;
    }

    // –ó–∞–ø—É—Å–∫
    init();
});
