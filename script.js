document.addEventListener('DOMContentLoaded', function() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const colorPalette = [
        '#10367D', // –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω–∏–π
        '#2D4D9E', 
        '#4A64BF',
        '#677BDF',
        '#FF6B6B', // –ö—Ä–∞—Å–Ω—ã–π
        '#FF8E8E',
        '#4ECDC4', // –ë–∏—Ä—é–∑–æ–≤—ã–π
        '#7EDFD8',
        '#A05195', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        '#C27BB3',
        '#FDCB6E', // –ñ—ë–ª—Ç—ã–π
        '#FFEAA7'
    ];

    // –≠–ª–µ–º–µ–Ω—Ç—ã
    const mainScreen = document.getElementById('mainScreen');
    const startBtn = document.getElementById('startBtn');
    const registrationForm = document.getElementById('registrationForm');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    const savedProfile = localStorage.getItem('datingProfile');
    if (savedProfile) {
        showProfile(JSON.parse(savedProfile));
        return;
    }

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
        name: '',
        age: '',
        city: '',
        interests: [],
        moodColor: '#10367D',
        avatar: null,
        createdAt: new Date().toISOString()
    };

    let currentStep = 1;
    const totalSteps = 6;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    startBtn.addEventListener('click', startRegistration);

    function startRegistration() {
        mainScreen.style.opacity = 0;
        setTimeout(() => {
            mainScreen.classList.add('hidden');
            registrationForm.classList.remove('hidden');
            loadRegistrationForm();
            setTimeout(() => {
                registrationForm.style.opacity = 1;
                // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
                const firstInput = document.getElementById('userName');
                if (firstInput) firstInput.focus();
            }, 50);
        }, 500);
    }

    function loadRegistrationForm() {
        registrationForm.innerHTML = `
            <div class="form-step active" data-step="1">
                <h2>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</h2>
                <input type="text" class="input-field" id="userName" placeholder="–í–∞—à–µ –∏–º—è" required>
                <div class="navigation">
                    <button class="btn next-step">–î–∞–ª–µ–µ</button>
                </div>
            </div>

            <div class="form-step" data-step="2">
                <h2>–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</h2>
                <input type="number" class="input-field" id="userAge" min="18" max="100" placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç" required>
                <div class="navigation">
                    <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
                    <button class="btn next-step">–î–∞–ª–µ–µ</button>
                </div>
            </div>

            <div class="form-step" data-step="3">
                <h2>–í–∞—à –≥–æ—Ä–æ–¥</h2>
                <input type="text" class="input-field" id="userCity" placeholder="–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?" required>
                <div class="navigation">
                    <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
                    <button class="btn next-step">–î–∞–ª–µ–µ</button>
                </div>
            </div>

            <div class="form-step" data-step="4">
                <h2>–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?</h2>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ 1-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞</p>
                <div class="tags-container">
                    <div class="tag" data-interest="music">üéµ –ú—É–∑—ã–∫–∞</div>
                    <div class="tag" data-interest="sports">‚öΩ –°–ø–æ—Ä—Ç</div>
                    <div class="tag" data-interest="books">üìö –ö–Ω–∏–≥–∏</div>
                    <div class="tag" data-interest="travel">‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</div>
                    <div class="tag" data-interest="art">üé® –ò—Å–∫—É—Å—Å—Ç–≤–æ</div>
                    <div class="tag" data-interest="games">üéÆ –ò–≥—Ä—ã</div>
                </div>
                <div class="navigation">
                    <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
                    <button class="btn next-step">–î–∞–ª–µ–µ</button>
                </div>
            </div>

            <div class="form-step" data-step="5">
                <h2>–í–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç</h2>
                <div class="colors-container">
                    ${colorPalette.map(color => `
                        <div class="color-option" style="background: ${color}" data-color="${color}"></div>
                    `).join('')}
                </div>
                <div class="navigation">
                    <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
                    <button class="btn next-step">–î–∞–ª–µ–µ</button>
                </div>
            </div>

            <div class="form-step" data-step="6">
                <h2>–í–∞—à–µ —Ñ–æ—Ç–æ</h2>
                <p>–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</p>
                <div class="avatar-upload">
                    <label class="btn">
                        üì∏ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                        <input type="file" id="avatarUpload" accept="image/*" hidden>
                    </label>
                    <div class="avatar-preview hidden" id="avatarPreview"></div>
                </div>
                <div class="navigation">
                    <button class="btn prev-step">–ù–∞–∑–∞–¥</button>
                    <button class="btn" id="completeBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
                </div>
            </div>
        `;

        initFormHandlers();
    }

    function initFormHandlers() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.next-step').forEach(btn => {
            btn.addEventListener('click', goToNextStep);
        });

        document.querySelectorAll('.prev-step').forEach(btn => {
            btn.addEventListener('click', goToPrevStep);
        });

        // –ò–Ω—Ç–µ—Ä–µ—Å—ã
        document.querySelectorAll('.tag').forEach(tag => {
            tag.addEventListener('click', function() {
                const interest = this.dataset.interest;
                if (this.classList.contains('selected')) {
                    this.classList.remove('selected');
                    userData.interests = userData.interests.filter(i => i !== interest);
                } else {
                    if (userData.interests.length < 3) {
                        this.classList.add('selected');
                        userData.interests.push(interest);
                    } else {
                        alert('–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤');
                    }
                }
            });
        });

        // –¶–≤–µ—Ç–∞
        document.querySelectorAll('.color-option').forEach(color => {
            color.addEventListener('click', function() {
                document.querySelectorAll('.color-option').forEach(c => {
                    c.classList.remove('selected');
                });
                this.classList.add('selected');
                userData.moodColor = this.dataset.color;
            });
        });

        // –ê–≤–∞—Ç–∞—Ä
        document.getElementById('avatarUpload')?.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file && file.type.match('image.*')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    userData.avatar = e.target.result;
                    const preview = document.getElementById('avatarPreview');
                    preview.style.backgroundImage = `url(${e.target.result})`;
                    preview.classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        document.getElementById('completeBtn')?.addEventListener('click', completeRegistration);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
        document.querySelectorAll('.input-field').forEach(input => {
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    goToNextStep();
                }
            });
        });
    }

    function goToNextStep() {
        if (!validateStep(currentStep)) return;
        saveStepData(currentStep);

        document.querySelector(`[data-step="${currentStep}"]`).classList.remove('active');
        currentStep++;
        const nextStep = document.querySelector(`[data-step="${currentStep}"]`);
        if (nextStep) {
            nextStep.classList.add('active');
            nextStep.scrollIntoView({ behavior: 'smooth', block: 'start' });
            
            // –§–æ–∫—É—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
            setTimeout(() => {
                const nextInput = nextStep.querySelector('input');
                if (nextInput) nextInput.focus();
            }, 300);
        }
    }

    function goToPrevStep() {
        document.querySelector(`[data-step="${currentStep}"]`).classList.remove('active');
        currentStep--;
        const prevStep = document.querySelector(`[data-step="${currentStep}"]`);
        if (prevStep) {
            prevStep.classList.add('active');
            prevStep.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }

    function validateStep(step) {
        switch(step) {
            case 1:
                if (!document.getElementById('userName')?.value.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
                    return false;
                }
                return true;
            case 2:
                const age = parseInt(document.getElementById('userAge')?.value);
                if (isNaN(age) || age < 18 || age > 100) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100)');
                    return false;
                }
                return true;
            case 3:
                if (!document.getElementById('userCity')?.value.trim()) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥');
                    return false;
                }
                return true;
            case 4:
                if (userData.interests.length === 0) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å');
                    return false;
                }
                return true;
            case 5:
                if (!userData.moodColor) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç');
                    return false;
                }
                return true;
            default:
                return true;
        }
    }

    function saveStepData(step) {
        switch(step) {
            case 1:
                userData.name = document.getElementById('userName')?.value.trim() || '';
                break;
            case 2:
                userData.age = document.getElementById('userAge')?.value || '';
                break;
            case 3:
                userData.city = document.getElementById('userCity')?.value.trim() || '';
                break;
        }
    }

    function completeRegistration() {
        if (!validateStep(currentStep)) return;
        saveStepData(currentStep);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        localStorage.setItem('datingProfile', JSON.stringify(userData));
        showProfile(userData);
    }

    function showProfile(profileData) {
        registrationForm.classList.add('hidden');
        
        const profileHTML = `
            <div class="profile-card">
                <div class="avatar-preview ${profileData.avatar ? 'has-image' : ''}" 
                     style="background-image: url(${profileData.avatar || ''});"></div>
                <h2 class="profile-name">${profileData.name}</h2>
                <p class="profile-age">${profileData.age} –ª–µ—Ç</p>
                <div class="profile-city">${profileData.city}</div>
                
                <div class="profile-interests">
                    ${profileData.interests.map(interest => `
                        <div class="interest-tag">${getInterestEmoji(interest)} ${getInterestName(interest)}</div>
                    `).join('')}
                </div>
                
                <div class="profile-footer">
                    –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${new Date(profileData.createdAt).toLocaleDateString()}
                </div>
            </div>
            
            <div class="navigation">
                <button class="btn" id="editProfileBtn">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="btn" id="newProfileBtn">–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å</button>
            </div>
        `;
        
        mainScreen.innerHTML = profileHTML;
        mainScreen.classList.remove('hidden');
        mainScreen.style.opacity = 1;

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('editProfileBtn').addEventListener('click', () => {
            Object.assign(userData, profileData);
            startRegistration();
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        document.getElementById('newProfileBtn').addEventListener('click', () => {
            localStorage.removeItem('datingProfile');
            location.reload();
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getInterestEmoji(interest) {
        const emojis = {
            music: 'üéµ',
            sports: '‚öΩ',
            books: 'üìö',
            travel: '‚úàÔ∏è',
            art: 'üé®',
            games: 'üéÆ'
        };
        return emojis[interest] || '‚ù§Ô∏è';
    }

    function getInterestName(interest) {
        const names = {
            music: '–ú—É–∑—ã–∫–∞',
            sports: '–°–ø–æ—Ä—Ç',
            books: '–ö–Ω–∏–≥–∏',
            travel: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            art: '–ò—Å–∫—É—Å—Å—Ç–≤–æ',
            games: '–ò–≥—Ä—ã'
        };
        return names[interest] || interest;
    }
});